{"version":3,"sources":["components/NavBar.js","components/Content.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","React","useState","scrolled","setScrolled","handleScroll","offset","window","scrollY","useEffect","addEventListener","navbarClasses","push","className","join","href","Content","data","App","NavBar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAoCeA,G,MAlCF,WAAO,IAAD,EACgBC,IAAMC,UAAS,GAD/B,mBACRC,EADQ,KACCC,EADD,KAETC,EAAa,WACf,IAAMC,EAASC,OAAOC,QAElBJ,EADAE,EAAS,MAOjBG,qBAAU,WACNF,OAAOG,iBAAiB,SAASL,MAErC,IAAIM,EAAc,CAAC,UAKnB,OAJGR,GACCQ,EAAcC,KAAK,YAInB,wBAAQC,UAAWF,EAAcG,KAAK,KAAtC,SAEA,qBAAKD,UAAU,aAAf,SACI,+BACE,6BAAI,mBAAGE,KAAK,SAAR,oBACJ,6BAAI,mBAAGA,KAAK,SAAR,yBACJ,6BAAI,mBAAGA,KAAK,SAAR,wBACJ,6BAAI,mBAAGA,KAAK,SAAR,kCCXHC,G,MAhBD,WACZ,IAAMC,EACJ,qBAAKJ,UAAU,MAAf,SACI,mDAGR,OACI,uBAAMA,UAAU,UAAhB,UACKI,EACAA,EACAA,EACAA,EACAA,OCDMC,MATf,WACE,OACE,sBAAKL,UAAU,MAAf,UACE,cAACM,EAAD,IACA,cAAC,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a6db7fad.chunk.js","sourcesContent":["import React,{useEffect} from 'react';\nimport '../styles/navbar.scss';\nconst Navbar=() => {\n    const [scrolled,setScrolled] = React.useState(false);\n    const handleScroll=() => {\n        const offset = window.scrollY;\n        if (offset > 100) {\n            setScrolled(true);\n        } else {\n            setScrolled(false);\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener('scroll',handleScroll)\n    })\n    let navbarClasses=['navbar'];\n    if(scrolled){\n        navbarClasses.push('scrolled');\n    }\n\n    return (\n        <header className={navbarClasses.join(\" \")}>\n\n        <nav className=\"navigation\"> \n            <ul>\n              <li><a href=\"#post1\">Home</a></li>\n              <li><a href=\"#post2\">Paintings</a></li>\n              <li><a href=\"#post3\">Wood art</a></li>\n              <li><a href=\"#post4\">Stone art</a></li>\n            </ul>\n        </nav>\n\n    </header>\n    );\n};\nexport default Navbar;","import React from 'react';\nimport '../styles/content.scss';\nconst Content=() => {\n  const data=(\n    <div className=\"box\">\n        <h2>My div content </h2>\n    </div>\n  );\nreturn (\n    <main className=\"content\">\n        {data}\n        {data}\n        {data}\n        {data}\n        {data}\n    </main>\n  )\n}\nexport default Content;","import './App.css';\nimport NavBar from './components/NavBar';\nimport Content from './components/Content';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}